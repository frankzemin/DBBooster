<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DBbooster - CM Parameters</title>
    <!-- Load Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Load SheetJS (xlsx.full.min.js) for Excel file parsing -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <!-- Load MathJax for LaTeX rendering -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        /* Custom styles for the app */
        html, body { height: 100%; margin: 0; padding: 0; }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0f172a; /* Dark slate background */
            color: #e2e8f0; /* Light text */
        }
        
        /* Custom input styles for dark mode */
        .config-input, .config-select {
            border: 1px solid #334155; /* Dark border */
            border-radius: 0.375rem;
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            transition: border-color 0.2s, box-shadow 0.2s;
            background-color: #1e293b; /* Dark input background */
            color: #e2e8f0; /* Light text */
        }
        .config-input:focus, .config-select:focus {
            outline: 2px solid transparent;
            outline-offset: 2px;
            border-color: #60a5fa; /* Blue focus border */
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.3);
        }
        .config-input::placeholder {
            color: #94a3b8; /* Muted placeholder */
        }

        /* Inner Tabs */
        .tab-btn {
            border-bottom: 2px solid transparent;
            transition: border-color 0.3s, color 0.3s;
        }
        .tab-btn.active {
            border-bottom-color: #60a5fa; /* blue-400 */
            color: #60a5fa; /* blue-400 */
            font-weight: 600;
        }
        .cm-tab-btn {
            border: 1px solid #334155; /* Dark border */
            border-bottom: 0;
            background: linear-gradient(to bottom, #1e293b, #0f172a); /* Dark gradient */
            margin-bottom: -1px;
            border-radius: 6px 6px 0 0;
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #94a3b8; /* Muted text */
            cursor: pointer;
            transition: background 0.2s, color 0.2s;
            box-shadow: 0 1px 2px rgba(0,0,0,0.2);
        }
        .cm-tab-btn:hover {
            background: linear-gradient(to bottom, #334155, #1e293b); /* Hover gradient */
        }
        .cm-tab-btn.active {
            background: linear-gradient(to bottom, #0f172a, #1e293b); /* Active gradient */
            border-color: #60a5fa; /* Blue border */
            border-bottom-color: #0f172a;
            font-weight: 600;
            color: #60a5fa; /* Blue text */
            box-shadow: 0 1px 3px rgba(0,0,0,0.3);
        }
        .cm-tab-btn .delete-material-btn {
            margin-left: 8px;
            color: #f87171; /* Red delete button */
            font-weight: bold;
            font-size: 1.2rem;
            opacity: 0.7;
            transition: opacity 0.2s, transform 0.2s;
        }
        .cm-tab-btn:hover .delete-material-btn,
        .cm-tab-btn.active .delete-material-btn {
            opacity: 1;
        }
        .cm-tab-btn .delete-material-btn:hover {
            transform: scale(1.2);
        }

        /* CM Params Grid */
        .cm-material-section {
            border: 1px solid #334155; /* Dark border */
            border-radius: 0 6px 6px 6px;
            padding: 1rem;
            background: linear-gradient(to bottom right, #0f172a, #1e293b); /* Dark gradient */
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
        }
        .param-grid-container {
            font-family: 'Consolas', 'Menlo', 'Courier New', monospace;
            font-size: 0.875rem;
            line-height: 1.5;
            background-color: #1e293b; /* Dark container background */
            border: 1px solid #334155; /* Dark border */
            border-radius: 0.375rem;
            padding: 1rem;
            overflow-x: auto;
            max-width: 100%;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);
        }
        .param-ruler {
            color: #60a5fa; /* Blue ruler text */
            white-space: pre;
            margin-bottom: 0.5rem;
            font-size: 0.75rem;
            text-shadow: 0 1px 1px rgba(0,0,0,0.5);
        }
        .param-row-labels {
            display: flex;
            color: #93c5fd; /* Light blue labels */
            font-weight: 600;
            border-bottom: 1px solid #334155; /* Dark separator */
        }
        .param-row-inputs {
            display: flex;
            margin-bottom: 0.75rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #334155; /* Dark separator */
        }
        .param-row-inputs:last-of-type {
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: 0;
        }
        .param-row-labels :first-child,
        .param-row-inputs :first-child {
            border-left: none;
            padding-left: 0.25rem;
        }
        .param-label,
        .param-input-wrapper,
        .param-spacer {
            padding: 0.25rem 0.5rem;
            text-align: right;
            border-left: 1px solid #334155; /* Dark separators */
            flex-shrink: 0;
        }
        .param-row-labels :first-child,
        .param-row-inputs :first-child {
            border-left: none;
            padding-left: 0.25rem;
        }
        .param-label {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            cursor: help;
            font-size: 0.875rem;
            text-shadow: 0 1px 1px rgba(0,0,0,0.5);
        }
        .param-input {
            width: 100%;
            background-color: #0f172a; /* Very dark input background */
            border: 1px solid #334155; /* Dark border */
            border-radius: 0.25rem;
            font: inherit;
            text-align: right;
            padding: 0.125rem 0.25rem;
            -moz-appearance: textfield;
            color: #e2e8f0; /* Light text */
            box-shadow: inset 0 1px 2px rgba(0,0,0,0.3);
        }
        .param-input::-webkit-outer-spin-button,
        .param-input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        .param-input:focus {
            outline: 2px solid transparent;
            outline-offset: 2px;
            border-color: #60a5fa; /* Blue focus border */
            box-shadow: 0 0 0 1px #60a5fa;
        }
        .param-input.border-red-500 {
            border-color: #f87171; /* Red error border */
        }
        .param-input.shadow-outline-red:focus {
            box-shadow: 0 0 0 1px #f87171; /* Red focus shadow */
        }
        .param-spacer {
            border-left: none;
        }
        .w-5ch {
            flex-basis: 5ch;
            min-width: 5ch;
        }
        .w-10ch {
            flex-basis: 10ch;
            min-width: 10ch;
        }
        #concatenated-output {
            font-family: 'Consolas', 'Menlo', 'Courier New', monospace;
            white-space: pre; /* Preserve fixed-width formatting */
            overflow: auto; /* Enable horizontal and vertical scrolling */
            background: linear-gradient(to bottom right, #1e293b, #0f172a); /* Dark gradient */
            border: 1px solid #334155; /* Dark border */
            border-radius: 0.5rem;
            padding: 1rem;
            /* min-height removed, handled by Tailwind h-64 class */
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.3);
            color: #93c5fd; /* Light blue text */
        }

        /* Toast Notification */
        #toast {
            position: fixed;
            bottom: 1.25rem; /* 20px */
            right: 1.25rem; /* 20px */
            background-color: #1e293b; /* Dark background */
            color: #e2e8f0; /* Light text */
            padding: 0.75rem 1.25rem; /* 12px 20px */
            border-radius: 0.5rem; /* 8px */
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.1);
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 50;
            border: 1px solid #334155; /* Dark border */
        }
        
        /* Button styles for dark mode */
        .btn-primary {
            background: linear-gradient(to bottom, #3b82f6, #2563eb);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        .btn-primary:hover {
            background: linear-gradient(to bottom, #2563eb, #1d4ed8);
            box-shadow: 0 4px 6px rgba(0,0,0,0.4);
        }
        .btn-secondary {
            background: linear-gradient(to bottom, #4b5563, #374151);
            color: #e5e7eb;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 500;
            transition: all 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        .btn-secondary:hover {
            background: linear-gradient(to bottom, #374151, #1f2937);
            box-shadow: 0 4px 6px rgba(0,0,0,0.4);
        }
        
        /* Reference Table Styles */
        .reference-table-container {
            background: linear-gradient(to bottom right, #1e293b, #0f172a);
            border: 1px solid #334155;
            border-radius: 0.5rem;
            padding: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.3);
            max-height: 500px;
            overflow-y: auto;
        }
        .reference-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.75rem;
            color: #cbd5e1;
        }
        .reference-table th {
            background-color: #334155;
            padding: 0.5rem;
            text-align: center;
            border: 1px solid #475569;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .reference-table td {
            padding: 0.4rem;
            border: 1px solid #334155;
            text-align: center;
            background-color: #0f172a;
        }
        .reference-table tr:nth-child(even) td {
            background-color: #1e293b;
        }
        .reference-table tr:hover td {
            background-color: #334155;
        }
        .reference-table-container::-webkit-scrollbar {
            width: 8px;
        }
        .reference-table-container::-webkit-scrollbar-track {
            background: #0f172a;
        }
        .reference-table-container::-webkit-scrollbar-thumb {
            background: #475569;
            border-radius: 4px;
        }
        .reference-table-container::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
        
        /* Sticky header for reference table */
        .sticky-header {
            position: sticky;
            top: 0;
            background-color: #334155;
            z-index: 20;
        }
    </style>
</head>
<body class="p-0 md:p-0">

    <div class="max-w-full mx-auto bg-slate-900 rounded-none shadow-xl overflow-hidden flex flex-col h-screen">
        <!-- Main Content -->
        <div class="flex-grow relative overflow-auto"> <!-- MODIFICATION: Added overflow-auto here -->
            <div id="interface-cmParams" class="interface-pane"> <!-- MODIFICATION: Removed h-full -->
                <div class="p-6 flex flex-col min-h-full"> <!-- MODIFICATION: Replaced h-full with min-h-full -->
                    <div class="flex border-b border-slate-700 mb-4">
                        <div id="cm-params-tabs-nav" class="flex space-x-1"></div>
                        <button id="add-cm-material-btn" class="ml-4 text-blue-400 hover:text-blue-300 font-bold text-2xl" title="Add New Material">+</button>
                    </div>
                    <div class="flex flex-col lg:flex-row gap-6"> <!-- MODIFICATION: Removed flex-grow and overflow-auto -->
                        <div id="cm-params-content" class="flex-grow overflow-auto space-y-6 lg:w-1/2"></div>
                        <div class="lg:w-1/2">
                            <h2 class="text-xl font-semibold mb-4 text-blue-400">Suggested CM Parameters Range</h2>
                            <div class="reference-table-container">
                                <table class="reference-table">
                                    <thead>
                                        <tr class="sticky-header">
                                            <th>Variable Name</th>
                                            <th>Symbol</th>
                                            <th>Bin (2007) Toyoura Sand (Dr=44%)</th>
                                            <th>Bin (2007) Toyoura Sand (Dr=75%)</th>
                                            <th>Bin (2007) Toyoura Sand (Dr=92%)</th>
                                            <th>Bao (2012) Sand</th>
                                            <th>Bao (2012) Clay</th>
                                            <th>Xiong (2014) Shirasu</th>
                                            <th>Xiong (2014) Silty Clay</th>
                                            <th>Xie (2023) Sand</th>
                                            <th>Xie (2023) Clay</th>
                                            <th>Bin (2023) Toyoura Sand</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Initial Void Ratio</td>
                                            <td>$$e_0$$</td>
                                            <td>0.81</td>
                                            <td>0.7</td>
                                            <td>0.63</td>
                                            <td>0.9</td>
                                            <td>—</td>
                                            <td>1.47 ~ 1.57</td>
                                            <td>—</td>
                                            <td>0.45 ~ 0.54</td>
                                            <td>0.84</td>
                                            <td>—</td>
                                        </tr>
                                        <tr>
                                            <td>ZRAMDA</td>
                                            <td>$$\lambda$$</td>
                                            <td>—</td>
                                            <td>0.05</td>
                                            <td>—</td>
                                            <td>0.022</td>
                                            <td>0.008</td>
                                            <td>0.105</td>
                                            <td>0.123</td>
                                            <td>0.035</td>
                                            <td>0.341</td>
                                            <td>0.05</td>
                                        </tr>
                                        <tr>
                                            <td>ZKAPA</td>
                                            <td>$$\kappa$$</td>
                                            <td>—</td>
                                            <td>0.006</td>
                                            <td>—</td>
                                            <td>0.008</td>
                                            <td>0.002</td>
                                            <td>0.007</td>
                                            <td>0.012</td>
                                            <td>0.008</td>
                                            <td>0.019</td>
                                            <td>0.0064</td>
                                        </tr>
                                        <tr>
                                            <td>ZMF</td>
                                            <td>$$M$$</td>
                                            <td>—</td>
                                            <td>1.3</td>
                                            <td>—</td>
                                            <td>2.5</td>
                                            <td>2.5</td>
                                            <td>0.47</td>
                                            <td>1.23</td>
                                            <td>1.3</td>
                                            <td>1.2</td>
                                            <td>1.3</td>
                                        </tr>
                                        <tr>
                                            <td>EPSO</td>
                                            <td>$$N$$</td>
                                            <td>—</td>
                                            <td>0.74</td>
                                            <td>—</td>
                                            <td>0.9</td>
                                            <td>0.88</td>
                                            <td>1.59</td>
                                            <td>0.81</td>
                                            <td>0.58</td>
                                            <td>0.98</td>
                                            <td>0.87</td>
                                        </tr>
                                        <tr>
                                            <td>POI</td>
                                            <td>$$\nu$$</td>
                                            <td>—</td>
                                            <td>0.3</td>
                                            <td>—</td>
                                            <td>0.3</td>
                                            <td>0.4</td>
                                            <td>0.3</td>
                                            <td>0.3</td>
                                            <td>0.3</td>
                                            <td>0.3</td>
                                            <td>0.3</td>
                                        </tr>
                                        <tr>
                                            <td>ZM</td>
                                            <td>$$m_R$$</td>
                                            <td>—</td>
                                            <td>0.1</td>
                                            <td>—</td>
                                            <td>2.5</td>
                                            <td>1.1</td>
                                            <td>1</td>
                                            <td>1</td>
                                            <td>0.1</td>
                                            <td>10</td>
                                            <td>0.01</td>
                                        </tr>
                                        <tr>
                                            <td>ZMS</td>
                                            <td>$$m_R^*$$</td>
                                            <td>—</td>
                                            <td>2.2</td>
                                            <td>—</td>
                                            <td>2.5</td>
                                            <td>0.02</td>
                                            <td>5</td>
                                            <td>5</td>
                                            <td>1.5</td>
                                            <td>0.5</td>
                                            <td>0.5</td>
                                        </tr>
                                        <tr>
                                            <td>RSO</td>
                                            <td>$$R_0$$</td>
                                            <td>0.01</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                        </tr>
                                        <tr>
                                            <td></td>
                                            <td>$$R_0^*$$</td>
                                            <td>—</td>
                                            <td>0.4</td>
                                            <td>0.7</td>
                                            <td>0.75</td>
                                            <td>0.75</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>0.2</td>
                                            <td>0.2</td>
                                            <td>0.75</td>
                                        </tr>
                                        <tr>
                                            <td>ZETAO</td>
                                            <td>$$\zeta_0$$</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>0</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                        </tr>
                                        <tr>
                                            <td>ZBR</td>
                                            <td>$$b_r$$</td>
                                            <td>—</td>
                                            <td>1.5</td>
                                            <td>—</td>
                                            <td>1.5</td>
                                            <td>—</td>
                                            <td>0.5</td>
                                            <td>—</td>
                                            <td>1.5</td>
                                            <td>1.5</td>
                                            <td>1.5</td>
                                        </tr>
                                        <tr>
                                            <td>ZMB</td>
                                            <td>$$b_l$$</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>0.95</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                            <td>—</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="mt-12 pt-6 border-t border-slate-700">
                        <h2 class="text-xl font-semibold mb-4 text-blue-400">Concatenated Output (All Materials)</h2>
                        <div class="flex flex-wrap items-center mb-4">
                            <button id="concat-cm-params-btn" class="bg-gradient-to-r from-blue-600 to-blue-800 text-white px-4 py-2 rounded-lg text-sm font-medium hover:from-blue-700 hover:to-blue-900 transition shadow-md mr-4 mb-2 sm:mb-0">Generate Lines for All Materials</button>
                            <button id="copy-output-btn" class="bg-gradient-to-r from-green-600 to-green-800 text-white px-4 py-2 rounded-lg text-sm font-medium hover:from-green-700 hover:to-green-900 transition shadow-md mb-2 sm:mb-0">Copy All</button>
                        </div>
                        <div class="mt-4">
                            <label for="concatenated-output" class="block text-sm font-medium text-slate-300 mb-1">Result:</label>
                            <textarea id="concatenated-output" readonly class="w-full h-64 p-3 border border-slate-600 rounded-lg font-mono text-xs shadow-inner bg-slate-800 text-blue-300" placeholder="Click 'Generate...'"></textarea>
                        </div>
                        <p class="text-xs text-slate-400 mt-2">Line 1-3 for each material, listed sequentially.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast Notification -->
    <div id="toast"></div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            
            // --- STATE MANAGEMENT ---
            let globalState = {
                interfaces: {
                    cmParams: {
                        materials: [
                            {
                                id: 1,
                                name: "Material 1",
                                values: [
                                    Array(8).fill(''),
                                    Array(6).fill(''),
                                    Array(6).fill('')
                                ]
                            }
                        ],
                        activeMaterialId: 1,
                        nextMaterialId: 2
                    }
                }
            };

            // --- CORE FUNCTIONS ---
            
            function initialize() {
                renderCmParamsInterface();
                
                // Attach Event Listeners
                document.getElementById('concat-cm-params-btn')?.addEventListener('click', generateCmParamsConcatenatedLine);
                document.getElementById('add-cm-material-btn')?.addEventListener('click', addCmMaterial);
                document.getElementById('copy-output-btn')?.addEventListener('click', copyOutputToClipboard);
                
                // Trigger MathJax rendering for LaTeX
                if (typeof MathJax !== 'undefined') {
                    MathJax.typesetPromise && MathJax.typesetPromise();
                }
            }

            function renderCmParamsInterface() {
                renderCmParamsTabs();
                renderCmParamsSections();
            }

            function renderCmParamsTabs() {
                const state = globalState.interfaces.cmParams;
                const nav = document.getElementById('cm-params-tabs-nav');
                if (!nav) return;
                
                nav.innerHTML = "";
                
                state.materials.forEach(material => {
                    const btn = document.createElement('button');
                    btn.className = `cm-tab-btn ${material.id === state.activeMaterialId ? 'active' : ''}`;
                    btn.textContent = material.name;
                    btn.dataset.id = material.id;
                    btn.addEventListener('click', switchCmMaterialTab);
                    
                    if (state.materials.length > 1) {
                        const deleteBtn = document.createElement('span');
                        deleteBtn.className = 'delete-material-btn';
                        deleteBtn.innerHTML = '&times;';
                        deleteBtn.title = 'Delete Material';
                        deleteBtn.dataset.id = material.id;
                        deleteBtn.onclick = (e) => {
                            e.stopPropagation();
                            deleteCmMaterial(material.id);
                        };
                        btn.appendChild(deleteBtn);
                    }
                    
                    nav.appendChild(btn);
                });
            }

            function renderCmParamsSections() {
                const state = globalState.interfaces.cmParams;
                const content = document.getElementById('cm-params-content');
                if (!content) return;
                
                content.innerHTML = "";
                
                state.materials.forEach(m => {
                    const section = createCmMaterialSection(m);
                    section.classList.toggle('hidden', m.id !== state.activeMaterialId);
                    content.appendChild(section);
                });
            }

            function createCmMaterialSection(material) {
                const section = document.createElement('div');
                section.id = `cm-material-section-${material.id}`;
                section.className = 'cm-material-section';
                
                section.innerHTML = `
                    <h3 class="text-lg font-medium mb-4 text-blue-300">${material.name} Parameters</h3>
                    <div class="param-grid-container">
                        <div class="param-ruler">     |    |         |         |         |         |         |         |\n1    5    10        20        30        40        50        60        70</div>
                        <div class="param-row-labels">
                            <span class="param-label w-5ch" title="MT (Material type)">MT</span>
                            <span class="param-label w-5ch" title="MN (Material number)">MN</span>
                            <span class="param-label w-10ch" title="Rf (Ratio of critical principle stresses)">Rf</span>
                            <span class="param-label w-10ch" title="ν (Poisson's ratio)">ν</span>
                            <span class="param-label w-10ch" title="ρ (Density)">ρ</span>
                            <span class="param-label w-10ch" title="K0 (Static earth pressure coefficient)">K0</span>
                            <span class="param-label w-10ch" title="e0 (Initial void ratio)">e0</span>
                            <span class="param-label w-10ch" title="bl (Anisotropy)">bl</span>
                        </div>
                        <div class="param-row-inputs">
                            ${material.values[0].map((v, i) => `
                                <div class="param-input-wrapper ${[0,1].includes(i) ? 'w-5ch' : 'w-10ch'}">
                                    <input type="number" 
                                           ${[2,3,4,5,6,7].includes(i) ? 'step="any"' : ''} 
                                           class="param-input" 
                                           maxlength="${[0,1].includes(i) ? '5' : '10'}" 
                                           data-material-id="${material.id}" 
                                           data-row="0" 
                                           data-col="${i}" 
                                           value="${v || ''}">
                                </div>
                            `).join('')}
                        </div>
                        <div class="param-row-labels">
                            <span class="param-spacer w-10ch"></span>
                            <span class="param-label w-10ch" title="λ (Consolidation index)">λ</span>
                            <span class="param-label w-10ch" title="κ (Expansion index)">κ</span>
                            <span class="param-label w-10ch" title="h1 (Attenuation index for mass)">h1</span>
                            <span class="param-label w-10ch" title="h2 (Attenuation index for stiffness)">h2</span>
                            <span class="param-label w-10ch" title="k (Permeability coefficient)">k</span>
                            <span class="param-label w-10ch" title="Kf (Volume elasticity of water)">Kf</span>
                        </div>
                        <div class="param-row-inputs">
                            <span class="param-spacer w-10ch"></span>
                            ${material.values[1].map((v, i) => `
                                <div class="param-input-wrapper w-10ch">
                                    <input type="number" 
                                           step="any" 
                                           class="param-input" 
                                           maxlength="10" 
                                           data-material-id="${material.id}" 
                                           data-row="1" 
                                           data-col="${i}" 
                                           value="${v || ''}">
                                </div>
                            `).join('')}
                        </div>
                        <div class="param-row-labels">
                            <span class="param-spacer w-10ch"></span>
                            <span class="param-label w-10ch" title="ZM (Overconsolidation index)">ZM</span>
                            <span class="param-label w-10ch" title="-OCR (Overconsolidation ratio)">-OCR</span>
                            <span class="param-label w-10ch" title="ZMS (Structure index)">ZMS</span>
                            <span class="param-label w-10ch" title="R*0 (Initial structural ratio)">R*0</span>
                            <span class="param-label w-10ch" title="br (Anisotropy index)">br</span>
                            <span class="param-label w-10ch" title="ξ0 (Initial anisotropy)">ξ0</span>
                        </div>
                        <div class="param-row-inputs">
                            <span class="param-spacer w-10ch"></span>
                            ${material.values[2].map((v, i) => `
                                <div class="param-input-wrapper w-10ch">
                                    <input type="number" 
                                           step="any" 
                                           class="param-input" 
                                           maxlength="10" 
                                           data-material-id="${material.id}" 
                                           data-row="2" 
                                           data-col="${i}" 
                                           value="${v || ''}">
                                </div>
                            `).join('')}
                        </div>
                    </div>
                `;
                
                section.querySelectorAll('.param-input').forEach(input => {
                    input.addEventListener('input', handleCmInputChange);
                });
                
                return section;
            }

            function handleCmInputChange(event) {
                const { materialId, row, col } = event.target.dataset;
                const value = event.target.value;
                
                const mat = globalState.interfaces.cmParams.materials.find(m => m.id === parseInt(materialId));
                if (mat?.values[row]?.[col] !== undefined) {
                    mat.values[row][col] = value;
                }
            }

            function switchCmMaterialTab(event) {
                const newId = parseInt(event.target.closest('button').dataset.id);
                if (newId !== globalState.interfaces.cmParams.activeMaterialId) {
                    globalState.interfaces.cmParams.activeMaterialId = newId;
                    renderCmParamsInterface();
                    
                    // Clear output when switching materials
                    const outputEl = document.getElementById('concatenated-output');
                    if (outputEl) outputEl.value = '';
                }
            }

            function addCmMaterial() {
                const state = globalState.interfaces.cmParams;
                const newId = state.nextMaterialId++;
                
                state.materials.push({
                    id: newId,
                    name: `Material ${newId}`,
                    values: [
                        Array(8).fill(''),
                        Array(6).fill(''),
                        Array(6).fill('')
                    ]
                });
                
                state.activeMaterialId = newId;
                renderCmParamsInterface();
            }

            function deleteCmMaterial(materialId) {
                const state = globalState.interfaces.cmParams;
                
                if (state.materials.length <= 1) {
                    showToast("Cannot delete last material.", "error");
                    return;
                }
                
                // NOTE: Replaced confirm() with direct deletion for iframe compatibility
                // if (confirm(`Are you sure you want to delete this material?`)) {
                    const index = state.materials.findIndex(m => m.id === materialId);
                    if (index === -1) return;
                    
                    const name = state.materials[index].name;
                    state.materials.splice(index, 1);
                    
                    if (state.activeMaterialId === materialId) {
                        state.activeMaterialId = state.materials[0].id;
                    }
                    
                    renderCmParamsInterface();
                    showToast(`Deleted "${name}".`, "success");
                // }
            }

            function generateCmParamsConcatenatedLine() {
                const { materials } = globalState.interfaces.cmParams;
                const outputEl = document.getElementById('concatenated-output');
                
                if (!outputEl) {
                    showToast("Error finding output area.", "error");
                    return;
                }
                
                // Define field lengths for each row
                const lengths = [
                    [5, 5, 10, 10, 10, 10, 10, 10],  // Row 1
                    [10, 10, 10, 10, 10, 10],       // Row 2
                    [10, 10, 10, 10, 10, 10]        // Row 3
                ];
                
                // Padding function
                const pad = (val, len, el) => {
                    const str = (val || "").toString();
                    
                    // Truncate if too long and highlight error
                    if (str.length > len) {
                        if (el) el.classList.add('border-red-500', 'shadow-outline-red');
                        return str.substring(str.length - len);
                    }
                    
                    // Remove error highlighting if corrected
                    if (el) el.classList.remove('border-red-500', 'shadow-outline-red');
                    
                    // Pad with leading spaces
                    return str.padStart(len, ' ');
                };
                
                // Generate lines for all materials
                const allLines = materials.flatMap(m => {
                    const section = document.getElementById(`cm-material-section-${m.id}`);
                    
                    // Map each row of values to a formatted line
                    return m.values.map((rowVals, rIdx) => {
                        // Add indentation for rows 2 and 3
                        const prefix = rIdx > 0 ? " ".repeat(10) : "";
                        
                        // Format each value in the row
                        const paddedVals = rowVals.map((v, cIdx) => {
                            const inputEl = section?.querySelector(`input[data-row="${rIdx}"][data-col="${cIdx}"]`);
                            return pad(v, lengths[rIdx][cIdx], inputEl);
                        });
                        
                        // Join values and prepend indentation
                        return prefix + paddedVals.join('');
                    });
                });
                
                // Update output textarea
                outputEl.value = allLines.join('\n');
                showToast(`Generated lines for ${materials.length} material(s).`, "success");
            }

            function copyOutputToClipboard() {
                const outputEl = document.getElementById('concatenated-output');
                if (!outputEl) {
                    showToast("Error finding output area.", "error");
                    return;
                }
                
                const textToCopy = outputEl.value;
                
                if (!textToCopy) {
                    showToast("Nothing to copy.", "warning");
                    return;
                }
    
                // Use document.execCommand('copy') for iframe compatibility
                try {
                    // Temporarily remove 'readonly' to allow selection
                    outputEl.readOnly = false;
                    
                    outputEl.select();
                    outputEl.setSelectionRange(0, 99999); // For mobile devices
    
                    // Execute copy command
                    const successful = document.execCommand('copy');
                    
                    // Restore 'readonly'
                    outputEl.readOnly = true;
    
                    // Deselect text
                    if (window.getSelection) {
                        window.getSelection().removeAllRanges();
                    } else if (document.selection) {
                        document.selection.empty();
                    }
    
                    if (successful) {
                        showToast("Copied to clipboard!", "success");
                    } else {
                        showToast("Failed to copy. Please copy manually.", "error");
                    }
                } catch (err) {
                    // Restore 'readonly' in case of error
                    outputEl.readOnly = true;
                    console.error("Copy failed: ", err);
                    showToast("Failed to copy. Please copy manually.", "error");
                }
            }

            // --- Toast Notification ---
            let toastTimer;
            
            function showToast(message, type = "info") {
                const toast = document.getElementById('toast');
                if (!toast) return;
                
                // Set message text
                toast.textContent = message;
                
                // Reset classes and apply color based on type
                toast.className = 'fixed bottom-5 right-5 text-white px-5 py-3 rounded-lg shadow-xl transition-opacity duration-300 opacity-0 z-50';
                
                // Apply color classes based on type (FIXED: separate add() calls)
                if (type === "success") {
                    toast.classList.add('bg-green-700');
                    toast.classList.add('border');
                    toast.classList.add('border-green-500');
                } else if (type === "error") {
                    toast.classList.add('bg-red-700');
                    toast.classList.add('border');
                    toast.classList.add('border-red-500');
                } else if (type === "warning") {
                    toast.classList.add('bg-blue-700');
                    toast.classList.add('border');
                    toast.classList.add('border-blue-500');
                } else {
                    toast.classList.add('bg-slate-700');
                    toast.classList.add('border');
                    toast.classList.add('border-slate-500');
                }
                
                // Show toast
                clearTimeout(toastTimer);
                toast.classList.remove('opacity-0');
                
                // Hide toast after 3 seconds
                toastTimer = setTimeout(() => {
                    toast.classList.add('opacity-0');
                    setTimeout(() => {
                        // Reset all classes except positioning
                        toast.className = 'fixed bottom-5 right-5 text-white px-5 py-3 rounded-lg shadow-xl transition-opacity duration-300 opacity-0 z-50';
                    }, 300);
                }, 3000);
            }
            
            // --- Initialize App ---
            initialize();
        });
    </script>
</body>
</html>



